## 클래스(class)

관련 있는 변수(필드)와 함수(메서드)를 묶어서 만든 사용자 정의 자료형

## 클래스 구성요소

### 필드

- 클래스에 선언된 변수
- 클래스의 속성을 정의

### 메서드

- 특정 동작을 수행하는 코드 블록
- 입력을 이용하여 처리하고 결과를 반환
- 오버로딩 가능

### 생성자

- 객체 생성 시 호출되는 특별한 메서드
- 클래스 이름과 같고, 반환 타입이 없다.

## 코드 예시

```java
package class02;

public class Person {
	String name;
	int age;
	String hobby;

}
```

```java
package class02;

public class personTest {
	public static void main(String[] args) {
		//Yang을 생성해보자!
		Person yang = new Person(); //이게 생성자
		
		yang.name = "Yang";
		yang.age = 45;
		yang.hobby = "Youtube";
		System.out.printf("나의 이름은 %s이빈다. %n나이는 %d세, 취미는 %s입닏다. %n", yang.name, yang.age, yang.hobby);
	
	}
}

```

## 가변인자(Variable Arguments)

- 메서드에서 매개변수 개수를 가변적으로 받을 수 있음. (0개 ~)
- 배열처럼 처리되지만 호출 시 배열을 명시적으로 생성할 필요가 없음
- 가변 인자는 항상 마지막에 위치해야 함
- 여러 개의 가변 인자 불가

```java
리턴타입 메서드이름(타입... 변수명) {
    // 내부적으로 변수명은 배열처럼 사용 가능
}
```

---

```java
public class VarArgsExample {
    public static void printNumbers(int... numbers) {
        for (int n : numbers) {
            System.out.println(n);
        }
    }

    public static void main(String[] args) {
        printNumbers(1, 2, 3);
        printNumbers(10);
        printNumbers(); // 0개도 가능
    }
}

```

### ✔️ 메서드 오버로딩 (Overloading)

- 이름이 같고 매개변수가 다른 메서드를 여러 개 정의하는 것
- 중복 코드에 대한 효율적 관리 가능
- 파라미터의 개수 또는 순서, 타입이 달라야 할 것 (파라미터 이름만 다른 것은 X)
- 리턴 타입이 다른 것은 의미 X

```java
//메서드 오버로딩
//이름이 같으면서, 매개변수가 다른 메서드(파라미터의 타입, 개수, 순서가 달라야 함)

void study(long time) {
}

void study(double time) {
}

void study(int time1. int time2) {
}
```

## 생성자

- 클래스와 이름이 같고, 반환타입이 없음(void 작성 x)
- new 키워드와 함께 호출하여 객체 생성
- 생성자의 첫번째 라인으로 this() 생성자를 사용하여 또 다른 생성자를 하나 호출 가능

### 기본 생성자

정의되어 있는 생성자가 없다면 자바가 기본 생성자를 자동으로 만들어준다.

```java
package class04;

public class Dog {
	
	public Dog() {
	
		
		System.out.println("기본 생성자 호출");
	}

}

```

```java
package class04;

public class DogTest {
	
public static void main(String[] args) {
	
	//기본 생성자(매개변수가 없는 생성자)
	Dog dog = new Dog(); 
}
}

```

### 매개변수 생성자

```java
package class04;

public class Dog {
	
	String name;
	int age;
	
	//기본 생성자는 자동으로 추가되지만  습관적으로 만들기를 권장 -> Ctrl + space + enter
	public Dog() {
		System.out.println("기본 생성자 호출");
	}
	
	
	public Dog(String name, int age) {
		this.name =  name;
		this.age = age;
	}

}

```

```
java
package class04;

public class DogTest {
	
public static void main(String[] args) {
	
	//기본 생성자(매개변수가 없는 생성자)
	Dog dog = new Dog(); 
	
	//매개변수 생성자
	dog.name = "마루";
	dog.age = 5;
	
	Dog dog2 = new Dog("마리", 5);
}
}

```

### this.

- 매개변수 이름과 필드 이름이 같을 때, 필드를 구분하기 위해서 사용 (다르면 생략 가능)
- 참조 변수로써 현재 인스턴스 자기 자신을 가리킴
- static 영역에서 사용 불가능

```java
public class Dog {
    String name;
    int age;

    Dog(String name, int age) {
        this.name = name;  // 필드와 매개변수를 구분
        this.age = age;
    }
}
```

아래는 이해가 잘 안된다.

```java
package class04;

public class Dog {
	
	String name;
	int age;
	
	//기본 생성자는 자동으로 추가되지만  습관적으로 만들기를 권장 -> Ctrl + space + enter
	public Dog() {
		System.out.println("기본 생성자 호출");
	}
	
	public Dog(int age) {
		this("뽀삐", age);
	}
}

```

```java
package class04;

public class DogTest {
	
public static void main(String[] args) {
	
	//기본 생성자(매개변수가 없는 생성자)
	Dog dog = new Dog(); 
	
	//매개변수 생성자
	dog.name = "마루";
	dog.age = 5;
	
	Dog dog3 = new Dog(10);
	System.out.println(dog3.name); //뽀삐
}
}

```

# 객체지향 프로그래밍

Object-Oriented Programming (OOP)

컴퓨터 프로그래밍의 패러다임 중 하나이다. 

컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.

![image.png](attachment:68b9ecde-7767-47b3-8f0e-223cbf83a1d2:image.png)

객체 : 속성(data)과 행동(method)으로 구성된 모든 것

ex) 정보 + 행동

- 강아지 - 리트리버 + 짖는다()
- 나 -  나이 + 걷는다()

### 특징(A PIE)

1. Abstraction(추상화) : 복잡한 것은 숨기고 필요한 것만 보여준다.
2. Polymorphism(다형성) : 같은 이름인데 다른 동작을 수행하도록 하는 것. 
    
    ex) 같은 행동 “짖다()” 인데 객체에 따라서(강아지, 고양이)에게 따라 다르다. 
    
3. Inheritance(상속) : 부모의 것을 물려받아서 재사용 
4. Encapsulation(캡슐화) : 데이터를 외부에 노출시키지 않는다. 데이터를 안전하게 포장

### 장점

- 모듈화된 프로그래밍(자동차 각각의 부품을 나눠서 만들 수 있다)
- 재사용성이 높다.

### 단점

- 설계 시 많은 노력과 시간이 필요함
- 실행 속도가 상대적으로 느림

### 클래스와 객체

- 클래스(설계도) : 붕어빵틀
- 객체(실제 사례) : 클래스의 인스턴스- 붕어빵
